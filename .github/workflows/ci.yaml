name: Tests

on: [push, pull_request]

jobs:
  build-release:
    name: Build Ubuntu Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Build Outputs
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.cargo/bin/
            $HOME/.cargo/registry/index/
            $HOME/.cargo/registry/cache/
            $HOME/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
        
      - name: Cache Crosstool-NG Tools
        uses: actions/cache@v4
        with:
          path: |
            $HOME/.local/share/crosstool-ng
            $HOME/x-tools
            $HOME/.local/openssl
          key: ${{ runner.os }}-crosstool-ng-${{ hashFiles('**/.config') }}
          restore-keys: |
            ${{ runner.os }}-crosstool-ng-

      - name: Install Crosstool-NG and build toolchain
        if: runner.os == 'Linux'
        run: |
          echo $HOME
          export PATH=$HOME/.local/share/crosstool-ng/bin:$PATH
          export CT_PREFIX_DIR=$HOME/x-tools
          if ! command -v ct-ng; then
            sudo apt-get update
            sudo apt-get install -y autoconf automake libtool libtool-bin unzip help2man python3.10-dev gperf bison flex texinfo gawk libncurses5-dev
            git clone https://github.com/crosstool-ng/crosstool-ng
            cd crosstool-ng
            ./bootstrap
            ./configure --prefix=$HOME/.local
            make
            make install
            ls -la $HOME/.local/share/crosstool-ng 
          fi
          cd $GITHUB_WORKSPACE
          ct-ng build > build.log 2>&1
          status=$?
          echo "Build result:"
          if [ $status -eq 0 ]; then
            echo "Build succeeded"
            ls -la $HOME/x-tools
          else
            echo "Build failed, here's the log:"
            cat build.log
          fi


      - name: Build Rusty Kaspa against musl
        if: runner.os == 'Linux'
        run: |
          export CC=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-gcc
          export CXX=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-g++
          export LD=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-ld
          export AR=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-ar        
          # Check if "$HOME/.local/openssl" directory exists, build if it does not
          if [ ! -d "$HOME/.local/openssl" ]; then
            wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz
            tar xzf openssl-1.1.1l.tar.gz
            cd openssl-1.1.1l
            ./Configure no-shared --static linux-x86_64 -fPIC --prefix=$HOME/.local/openssl
            make depend
            make
            make install
            ls -la $HOME/.local/openssl
          fi
          export OPENSSL_DIR=$HOME/.local/openssl
          export OPENSSL_STATIC=true
          export RUSTFLAGS="-C link-arg=-static -C link-arg=-L$OPENSSL_DIR/lib"
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=$CC
